
Instruções 	Opcode
	
MOV A,R4=       EC
ADD A,R7=	2F
MOV R5,A=	FD
INC A=		04
ADD A,10=	25
MOV A,#0=	74
ADD A,R0=	28
ADD A,R1=	29
ADD A,@R0=	26
ADD A,@R1=	27
ADD A,#43H=	24
ADD A, 43=	25

Funções iterativas são funções que utilizam estruturas de 
controle de fluxo iterativas, como loops, para repetir uma 
sequência de instruções até que uma condição seja atendida.
Qual é a diferença entre uma função recursiva e uma função 
iterativa em termos de desempenho e consumo de memória?

R: funções recursiva consome mais memoria pois ela fica rodando infinito e armazenando a pilha e assim exigindo mais do processador e da meoria.

;Exercicio 1
;MOV A,#11111110B
;MOV P1,A


;VOLTA:
;MOV R0,#7
;LOOP:
;RL A
;MOV P1,A

;DJNZ R0, LOOP

;LOOP2:
;RR A
;MOV P1,A

;DJNZ R0, LOOP2
;SJMP VOLTA

;EXERCICIO 4
;Funções iterativas são funções que utilizam estruturas de 


;MOV A, #11h
;LCALL FUNC01
;SJMP $
;org 1100h
;FUNC01:
;MOV 30H, #33h
;LCALL FUNC02
;NOP
;RET

;org 2130h
;FUNC02:
;MOV 40H, #01H
;LCALL FUNC03
;NOP
;RET
;org 30A0h
;FUNC03:
;MOV 40H, #50H
;RET

;EXERCICIO 7

;LJMP MAIN

;ORG 1111H
;MAIN:
;LCALL MAIN
;SJMP $

;FUNC:
;NOP
;LCALL FUNC
;RET

;EXERCICIO 3


MOV 30H,#2
MOV 31H,#4
MOV 32H,#2
MOV 33H,#2
MOV 34H,#3
MOV R0,#30H
MOV R1,#40H
MOV R2,#5
LCALL COPIA
SJMP $

COPIA:
MOV A,@R0
MOV @R1,A
INC R0
INC R1
DJNZ R2,COPIA
RET


Aula 07

1-Representar o número -127 em complemento de 2 de 8bits
R: +127= 01111111,complemento de 1: 1000 0000
complemento de 2: 1000 0000+1= 1000 0001
 
2-Representar o número -2 em complemento de 2 de 8bits.
R: +2= 0000 0010, complemento de 1: 1111 1101
complemento de 2:  1111 1101+1=1111 1110

3-Representar o número 6 no excesso de 127 de 8bits.
R: 127+5=133
133=10000101

4-Representar o número -6 no excesso de 127 de 8bits
R: 127-6=121
121=01111001

5-Representar o número 5 no excesso de 1023 de 11bits
R: 1023+5=1028
1028:10000000100

Aula 08


1-Converter o número 2,40625 para padrão IEEE 754 de 32 bits.

0,40625: 0,40625x2=0,8125; 0,8125x2=1,625;0,625x2=1,250; 0,250x2=0,50; 0,50x2=1,0
em bin fica então:01101

2:10
entao=10,01101
1,001101x2^1

fração:001101
127+expoente=128; 128=1000 0000
expoente:1000 0000
sinal:0

finalmente: 01000000001101000000000000000000

EX1-Converter o número 2.6875 para padrão IEEE 754 de 32 bits

0,6875: 0,6875x2=1,375; 0,375x2=0,275; 0,75x2=1,5; 0,5x2= 1; 
em bin: 1011

2:10
então 10,1011
1,01011x2^1
127+expoente=128; 128=1000 0000
expoente:1000 0000
sinal:0

finamente: 01000000010110000000000000000000

EX2-Converter o número 7.375 para padrão IEEE 754 de 32 bits

0,375X2=0,750; 0,750X2=1,50 ; 0,5X2=1,0
em bin: 011

7:111
então 111,011
1,11011x2^2
127+2=129; 129=10000001
fração:11011
exp:10000001
sinal:0

finalmente: 01000000101100000000000000000000


